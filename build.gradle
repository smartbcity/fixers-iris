allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = group
    version = version

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext {
        guava_version = '27.0.1-jre'
        slf4j_version = '1.7.26'
        assertj_version = '3.12.0'
        junit_version = '5.4.0'
        jackson_version = '2.9.8'
        bouncycastleVersion = '1.65'
    }

    dependencies {
        implementation "com.google.guava:guava:$guava_version"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"

        implementation "org.slf4j:slf4j-api:$slf4j_version"

        testImplementation "org.assertj:assertj-core:$assertj_version"
        testImplementation "org.junit.jupiter:junit-jupiter:$junit_version"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        reports {
            junitXml.enabled = true
            html.enabled = false
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        archiveClassifier = 'javadoc'
    }

    afterEvaluate { Project project ->
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    pom {
                        name = pomName
                        description = pomDescription
                        url = pomUrl
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'SmartB'
                                name = 'Dev'
                            }
                        }
                        scm {
                            connection = pomScmConnection
                            developerConnection = pomScmDeveloperConnection
                            url = pomScmUrl
                        }
                    }
                }
            }
            repositories {
                maven {
                    def releasesRepoUrl =  mavenRepoReleases
                    def snapshotsRepoUrl = mavenRepoSnapshots
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        }
        signing {
            def key = signingKey
            def password = signingPassword
            useInMemoryPgpKeys(key, password)
            sign publishing.publications.mavenJava
        }

    }

}
