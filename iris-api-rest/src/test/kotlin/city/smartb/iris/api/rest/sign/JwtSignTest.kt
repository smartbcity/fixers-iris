package city.smartb.iris.api.rest.sign

import city.smartb.iris.api.rest.model.jwt.Jwt
import city.smartb.iris.api.rest.model.jwt.asByte64Url
import com.nimbusds.jose.crypto.RSASSAVerifier
import com.nimbusds.jwt.SignedJWT
import org.assertj.core.api.Assertions
import org.bouncycastle.util.io.pem.PemObject
import org.junit.jupiter.api.Test
import java.security.KeyFactory
import java.security.interfaces.RSAPublicKey
import java.security.spec.X509EncodedKeySpec
import java.time.LocalDateTime
import java.util.*


class JwtSignTest {

    @Test
    fun `should build jwt asSHA256ForNoneWithRSA`() {
        val jwt = Jwt.builder()
                .publicKey("publickey")
                .issueTime( LocalDateTime.of(1955, 11, 12, 6, 38, 0))
                .expirationTime( LocalDateTime.of(2015, 10, 21, 7, 28, 0))
                .build()
//        System.out.println(jwt.asString())
        val SHASendToPhone = jwt.asSHA256ForNoneWithRSA()
        System.out.println(SHASendToPhone.asByte64Url())
        val privateKey = KeyPairReader.loadPrivateKey("rsa/adam")
        val sign = SHA256KtTest.signNoneWithRSA(SHASendToPhone, privateKey)

        val signedJWT = jwt.append(sign)
        Assertions.assertThat(signedJWT).isEqualTo("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJwdWJsaWNrZXkiLCJhdWQiOiJodHRwczpcL1wvaXJpcy5zbWFydGIubmV0d29yayIsImlzcyI6ImlyaXMuc21hcnRiLm5ldHdvcmsiLCJleHAiOjE0NDU0MDUyODAsImlhdCI6LTQ0NjE0OTMyMH0.lBcuwpHzQzrXsUG1jTYAMfnxw3LayHCqRtbVSGUVcadNYCXDR8T8Ins6JtSE_HR7GbuPf0vfBna-BPmCbLK1nqgDYUH3Z4pTtLcTzFEjJ9ZUYiqOgp72Vr_M0u9tmDzm8R807obthQte_tzz7sVp1WaQWun4KS5935LCb9CY2Q135R02rOkis81IDoIVOOfA8Iu6No2EG-7XaSTETBI59LYDltNYPW3fmF5S09GxYTxmc1gy2-CA1dgZ9Hdjpr8Qv_vu9iX3Uy1zz4NXMyvlS4jGdjqnHtOBRynk60EvWCsaWgSIeghPmu__D9VM0KU4Fp0K3jHP8Gv941QY1zWi1A")
    }

    @Test
    fun `shouldbe valid jwt generated by me`() {
//        PKCS8
        val pub = KeyPairReader.loadPublicKey("rsa/adam")
        val verifier = RSASSAVerifier(pub as RSAPublicKey)
        val signedJWT = SignedJWT.parse("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJwdWJsaWNrZXkiLCJhdWQiOiJodHRwczpcL1wvaXJpcy5zbWFydGIubmV0d29yayIsImlzcyI6ImlyaXMuc21hcnRiLm5ldHdvcmsiLCJleHAiOjE0NDU0MDUyODAsImlhdCI6LTQ0NjE0OTMyMH0.lBcuwpHzQzrXsUG1jTYAMfnxw3LayHCqRtbVSGUVcadNYCXDR8T8Ins6JtSE_HR7GbuPf0vfBna-BPmCbLK1nqgDYUH3Z4pTtLcTzFEjJ9ZUYiqOgp72Vr_M0u9tmDzm8R807obthQte_tzz7sVp1WaQWun4KS5935LCb9CY2Q135R02rOkis81IDoIVOOfA8Iu6No2EG-7XaSTETBI59LYDltNYPW3fmF5S09GxYTxmc1gy2-CA1dgZ9Hdjpr8Qv_vu9iX3Uy1zz4NXMyvlS4jGdjqnHtOBRynk60EvWCsaWgSIeghPmu__D9VM0KU4Fp0K3jHP8Gv941QY1zWi1A")
        val validated = signedJWT.verify(verifier)
        Assertions.assertThat(validated).isTrue()
    }


    @Test
    fun `shouldbe valid jwt`() {
        val publicKeyB = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmuaaCqCPPVVanE+gvu8eMlcHM1D1syB2yNBXnTIQcpaD72JEEm6cK9giM1hTiLEg00WgQwwKDT/kfjqY4Cg82yBIPPwkmNUbfSkKW9TcphDt0INAhT8MYBN7yQIFMzxxPfvETJg52CKgrEh5tX2rIrtnBo4TgvNRY+tCLkbiYyw5Q4xRdFMTZYs7VvckTtfyM0r+vpxaClrv/xFID4KvDNQ8KjI1iGABamVJzwEkVHyhL5LHyMQoy4gUUjEOpVkPeb0Rb1P48ac5xkbzOrq1YMngctyhfKJ5YX1mb3xWWB6axvV+ecws9YQYEuYFIf13HXCnqAO7VIwryYtO4rsKywIDAQAB"

        val pem =  PemObject("PUBLIC KEY", Base64.getDecoder().decode(publicKeyB))
        val spec = X509EncodedKeySpec(pem.content)
        val pubKey: RSAPublicKey =  KeyFactory.getInstance("RSA").generatePublic(spec) as RSAPublicKey

//        val kf = KeyFactory.getInstance("RSA")
//        val keySpecX509 = X509EncodedKeySpec(Base64.getDecoder().decode(publicKeyB))
//        val pubKey = kf.generatePublic(keySpecX509) as RSAPublicKey

        val verifier = RSASSAVerifier(pubKey)
        val signedJWT = SignedJWT.parse("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQW11YWFDcUNQUFZWYW5FK2d2dThlTWxjSE0xRDFzeUIyeU5CWG5USVFjcGFENzJKRUVtNmNLOWdpTTFoVGlMRWcwMFdnUXd3S0RUXC9rZmpxWTRDZzgyeUJJUFB3a21OVWJmU2tLVzlUY3BoRHQwSU5BaFQ4TVlCTjd5UUlGTXp4eFBmdkVUSmc1MkNLZ3JFaDV0WDJySXJ0bkJvNFRndk5SWSt0Q0xrYmlZeXc1UTR4UmRGTVRaWXM3VnZja1R0ZnlNMHIrdnB4YUNscnZcL3hGSUQ0S3ZETlE4S2pJMWlHQUJhbVZKendFa1ZIeWhMNUxIeU1Rb3k0Z1VVakVPcFZrUGViMFJiMVA0OGFjNXhrYnpPcnExWU1uZ2N0eWhmS0o1WVgxbWIzeFdXQjZheHZWK2Vjd3M5WVFZRXVZRklmMTNIWENucUFPN1ZJd3J5WXRPNHJzS3l3SURBUUFCIiwiYXVkIjoiaHR0cHM6XC9cL2lyaXMuc21hcnRiLm5ldHdvcmsiLCJpc3MiOiJpcmlzLnNtYXJ0Yi5uZXR3b3JrIiwiZXhwIjoxNTcwNzAyMTY0LCJpYXQiOjE1NzA2OTEzNjR9.EQ4ToVOyCsHfFdytaI3EZSJ9hRtmeX3n8_DQRYODChgtpVGL0rtMWxRfn65aj6IsWai7oFP6c942Md7qGyZgRMY3DPe2Tgbl4Q_CU1YYMa7r-D26Z772sZO8hdHUFavnAd0PlrUlfyKZe9vzuP4fW-9J-y2cSZXR8TDaNsQ4PSLcnXp1_mT8JM7mifnlZMFxcDPFS8ceRDLWuOc6W1bkpeqf6klI7QIDnCNnwPDJavh2ol8jNv-uoLsod3TiK60zwHxvHfEn6JfGpjQW2YH309ZWEEIiYEW3wivZYFR1Bb7gzQiwwKxEtUi4b7hi9c25P7djW9A36PbHSjdY2mCfXQ")
        val validated = signedJWT.verify(verifier)
        Assertions.assertThat(validated).isTrue()
    }

}